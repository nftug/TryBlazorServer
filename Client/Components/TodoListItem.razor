@using Application.Todos.Models
@using Domain.Todos
@using Domain.Todos.ValueObjects
@using Client.Models
@using Client.Data

@inject UserInfoService UserInfo

@if (Item == null) return;

<AuthorizeView Context="authContext">
    <tr class="align-middle">
        <td>@Item.Title</td>
        <td class="d-none d-lg-table-cell">
            @Item.StartDate?.ToShortDateString()
        </td>
        <td class="d-none d-lg-table-cell">
            @Item.EndDate?.ToShortDateString()
        </td>
        <td>
            <span class="dropdown-toggle badge @GetTodoBgClass(Item.State)" role="button" id="dropdownMenuLink"
                data-bs-toggle="dropdown" aria-expanded="false">
                @Item.State.DisplayValue
            </span>

            <ul class="dropdown-menu" aria-labelledby="dropdownMenuLink">
                <li class="@(GetDropdownClass(TodoState.Todo))" role="button" onclick=@(async () => await
                    OnClickChangeState.InvokeAsync((Item.Id, TodoState.Todo)))>
                    Todoに切り替え
                </li>
                <li class="@(GetDropdownClass(TodoState.Doing))" role="button" @onclick=@(async () => await
                    OnClickChangeState.InvokeAsync((Item.Id, TodoState.Doing)))>
                    Doingに切り替え
                </li>
                <li class="@(GetDropdownClass(TodoState.Done))" role="button" @onclick=@(async () => await
                    OnClickChangeState.InvokeAsync((Item.Id, TodoState.Done)))>
                    Doneに切り替え
                </li>
            </ul>
        </td>
        <td>
            <button type="button" class="btn btn-primary btn-sm" @onclick=@(async () => await
                OnClickEdit.InvokeAsync(Item)) disabled="@(!IsOwnedByUser)">
                <span class="oi oi-pencil" aria-hidden="true"></span>
            </button>
        </td>
    </tr>
</AuthorizeView>

@code {
    [Parameter]
    public TodoResultDTO? Item { get; set; }

    [Parameter]
    public EventCallback<TodoResultDTO> OnClickEdit { get; set; }

    [Parameter]
    public EventCallback<(Guid, TodoState)> OnClickChangeState { get; set; }

    private string GetTodoBgClass(TodoState state)
    => state == TodoState.Doing
    ? "bg-secondary"
    : state == TodoState.Done
    ? "bg-success"
    : "bg-primary";

    private string GetDropdownClass(TodoState state)
    => !IsOwnedByUser || Item?.State.Value == state.Value ? "dropdown-item disabled" : "dropdown-item";

    private bool IsOwnedByUser => Item?.OwnerUserId == UserInfo.Id;
}