@using Application.Todos
@using Domain.Todos

@if (Item == null) return;

<tr class="align-middle">
  <td>@Item.Title</td>
  <td class="d-none d-lg-table-cell">
    @Item.BeginDateTime?.ToShortDateString()
  </td>
  <td class="d-none d-lg-table-cell">
    @Item.DueDateTime?.ToShortDateString()
  </td>
  <td>
    <span class="dropdown-toggle badge @GetTodoBgClass(Item.State)" role="button" id="dropdownMenuLink"
      data-bs-toggle="dropdown" aria-expanded="false">
      @Item.State.DisplayValue
    </span>

    <ul class="dropdown-menu" aria-labelledby="dropdownMenuLink">
      <li class="@(GetDropdownClass(Item, TodoState.Todo))" role="button" onclick=@(async () => await
        OnClickChangeState.InvokeAsync((Item, TodoState.Todo)))>
        Todoに切り替え
      </li>
      <li class="@(GetDropdownClass(Item, TodoState.Doing))" role="button" @onclick=@(async () => await
        OnClickChangeState.InvokeAsync((Item, TodoState.Doing)))>
        Doingに切り替え
      </li>
      <li class="@(GetDropdownClass(Item, TodoState.Done))" role="button" @onclick=@(async () => await
        OnClickChangeState.InvokeAsync((Item, TodoState.Done)))>
        Doneに切り替え
      </li>
    </ul>
  </td>
  <td>
    <button type="button" class="btn btn-primary btn-sm" @onclick=@(async () => await OnClickEdit.InvokeAsync(Item))>
      <span class="oi oi-pencil" aria-hidden="true"></span>
    </button>
  </td>
</tr>

@code {
  [Parameter]
  public TodoResultDTO? Item { get; set; }

  [Parameter]
  public EventCallback<TodoResultDTO> OnClickEdit { get; set; }

  [Parameter]
  public EventCallback<(TodoResultDTO, TodoState)> OnClickChangeState { get; set; }

  private string GetTodoBgClass(TodoState state)
  => state == TodoState.Doing
  ? "bg-secondary"
  : state == TodoState.Done
  ? "bg-success"
  : "bg-primary";

  private string GetDropdownClass(TodoResultDTO item, TodoState state)
  => item.State == state ? "dropdown-item disabled" : "dropdown-item";
}